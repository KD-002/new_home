services:
  proxy:
    build:
      context: ./proxy
    ports:
      - '8081:80'
    depends_on:
      - auth
      - backend
      - frontend
    networks:
      - backend-network
      - frontend-network

  auth:
    restart: on-failure
    build:
      context: ./auth
    ports:
      - '8001:8000'
    container_name: auth-api-server
    volumes:
      - ./auth:/app
    depends_on:
      - auth_postgres
    env_file:
      - ./auth/env/.env
      - ./auth/env/.env-db
    networks:
      - auth-network
      - auth_postgres-network

  auth_postgres:
    image: postgres
    ports:
      - "5433:5432"
    volumes:
      - auth_postgres:/var/lib/postgresql/data
    env_file:
      - ./auth/env/.env-db
    networks:
      - auth_postgres-network

  backend:
    restart: on-failure
    build:
      context: ./backend_core
    ports:
      - '8000:8000'
    container_name: api-server
    volumes:
      - ./backend_core:/app
    depends_on:
      - postgres
    env_file:
      - ./backend_core/env/.env
      - ./backend_core/env/.env-db
    networks:
      - backend-network
      - postgres-network

  frontend:
    build:
      context: ./frontend
    ports:
      - '3000:3000'
    stdin_open: true
    volumes:
      - ./frontend/src:/app/src
    networks:
      - backend-network
      - frontend-network

  postgres:
    image: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    env_file:
      - ./backend_core/env/.env-db
    networks:
      - postgres-network

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  postgres-network:
    driver: bridge
  auth_postgres-network:
    driver: bridge
  auth-network:
    driver: bridge

volumes:
  postgres:
  auth_postgres: